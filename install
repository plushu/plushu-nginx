#!/usr/bin/env bash
set -eo pipefail; [[ $PLUSHU_TRACE ]] && set -x

templates_dir=$PLUSHU_ROOT/plugins/$PLUSHU_PLUGIN_NAME/templates

echo_install_information () {
  local distro=""
  if [[ -f /etc/os-release ]]; then
   distro=`sed -n 's/^ID=\(.*\)$/\1/p' /etc/os-release`
  fi
  case $distro in
    arch)
      cat <<"EOF"
To install Nginx on Arch Linux, run

# pacman -S nginx
EOF
      ;;
    ubuntu)
      cat <<"EOF"
To install the latest stable Nginx 1.4.x with WebSocket support, run

# add-apt-repository -y ppa:nginx/stable
# apt-get update
# apt-get install -y nginx dnsutils

See http://wiki.nginx.org/Install#Ubuntu_PPA for more info.
EOF
      ;;
    *)
      cat <<"EOF"
Look up how to install Nginx on your system:
  http://wiki.nginx.org/Install
EOF
      ;;
  esac
}

setup_sudoers () {
  if [[ $EUID == 0 ]]; then
    if fgrep -qx '#includedir /etc/sudoers.d' /etc/sudoers; then
      echo "/etc/sudoers includes /etc/sudoers.d... good."
      echo "Installing plushu-reload-nginx rule as a file in sudoers.d."
      install -m0440 $templates_dir/sudoers/plushu-reload-nginx \
        /etc/sudoers.d/plushu-reload-nginx
    else
      echo "Your /etc/sudoers doesn't include /etc/sudoers.d."
      included_dirs=`sed -n 's/^#includedir\s*//p' /etc/sudoers`
      if [[ -n "$included_dirs" ]]; then
        echo "It does include these directories:"
        echo
        echo "$included_dirs"
        echo
        echo "Please post an issue, including which distribution you are"
        echo "installing on and which directories it includes, at:"
        echo "https://github.com/plushu/plushu-nginx-vhost/issues"
        echo
      fi

      echo "This is a common directive in most modern sudo configurations"
      echo "(Debian has shipped with it since 1.7.2p1-1 in 2009)."
      echo "Either add this line to your configuration:"
      echo
      echo "#includedir /etc/sudoers.d"
      echo
      echo "and then reinstall this plugin (as root) to install the file for"
      echo "the relevant directive to reload Nginx, or add the line for"
      echo "the directive to /etc/sudoers directly:"
      echo
      echo "%plushu ALL=(ALL)NOPASSWD:nginx -s reload"
      echo
    fi
  else
    echo "The plushu user needs to be granted sudoers permission"
    echo "to reload the Nginx configuration."
    echo "To create it, reinstall this plugin as root, or add"
    echo "this line to your sudoers configuration:"
    echo
    echo "%plushu ALL=(ALL)NOPASSWD:nginx -s reload"
    echo
  fi
}

check_for_sudo () {
  if command -v sudo >/dev/null 2>&1; then
    echo "sudo appears to be installed... good."
    setup_sudoers
  else
    echo "sudo needs to be installed for this user to reload nginx."
    # If you're using a distro that doesn't come with sudo, you don't need me
    # to explain how to install it to you
    echo "Install sudo, then reinstall this plugin."
  fi
}

check_nginx_run_status () {
  if command -v systemctl >/dev/null 2>&1; then
    if systemctl -q is-enabled nginx.service; then
      echo "Nginx is enabled via systemctl... good."
    else
      echo "Nginx does not appear to be enabled. Enable it with:"
      echo
      echo "# systemctl enable nginx.service"
      echo
    fi
    if systemctl -q is-active nginx.service; then
      echo "Nginx is currently running... good."
    else
      echo "Nginx does not appear to be currently running. Start it with:"
      echo
      echo "# systemctl start nginx.service"
      echo
    fi
  else
    if pgrep -x nginx >/dev/null 2>&1; then
      echo "Nginx appears to be running... good."
    else
      echo "Nginx doesn't appear to be running."
      echo "You should start it with something like:"
      echo
      echo "# service start nginx"
      echo
    fi
    echo "Make sure Nginx is set to run automatically at startup."
  fi
}

nginx_plushu_conf="include $PLUSHU_ROOT/nginx/nginx.conf;"

eat_nginx_conf () {
  local http_depth=0
  local braces

  # File we save existing http block content to
  local existing_save=$PLUSHU_ROOT/nginx/http/existing.conf.save
  local http_blocks=0

  # Parsing routine for lines when inside the http block
  inside_http_block () {

    # Update depth in the http block according to balanced braces
    braces=`echo "$1" | tr -cd {}`
    # For each brace on this line
    for (( i=0; i<${#braces}; i++ )); do
      # Increase our block depth if it's an open-brace
      if [[ ${braces:$i:1} == '{' ]]; then
        ((http_depth++))
      # Reduce our block depth if it's a close brace
      else
        ((http_depth--))
        # Stop here if we've exited the http block
        if (( $http_depth == 0 )); then
          break
        fi
      fi
    done

    # If we exited the http block
    if (( $http_depth == 0 )); then
      # Replace braces with a regex matching all the text before this brace
      braces=`echo ${braces:0:$i} | sed 's/./.*?&/g'`
      # Write everything before this brace to the existing http save
      echo "$1" | sed "s/^\($braces\).*/\1/" >>"$existing_save"
      # Parse everything after this brace as a line outside of the block
      outside_http_block `echo "$1" | sed "s/^$braces}//g"`
      # Use a different filename for the next http block, if any
      existing_save=$PLUSHU_ROOT/nginx/http/existing.$((http_blocks)).conf.save
    # If this whole line was within the http block
    else
      # Write the line to the existing http save
      echo "$1" >>"$existing_save"
    fi
  }

  # Parsing routine for lines when outside the http block
  outside_http_block() {
    # If this line enters the http block
    if echo "$1" | grep -q 'http *{'; then
      # Write everything before the start of the block to the config
      echo "$1" | sed 's/http *{.*//' >>"$PLUSHU_ROOT/nginx/nginx.conf"
      # Increment the http block depth and number of blocks
      ((http_depth++))
      ((http_blocks++))
      # Continue parsing within the http block
      inside_http_block `echo "$1" | sed "s/^.*http *{//g"`
    else
    # Write all directives outside the http block to the config
      echo "$1" >>"$PLUSHU_ROOT/nginx/nginx.conf"
    fi
  }

  # Parse every line of the existing nginx.conf
  while read -r line; do
    if (( $http_depth > 0 )); then
      inside_http_block "$line"
    else
      outside_http_block "$line"
    fi
  done </etc/nginx/nginx.conf

  # Add an http block to our new conf
  echo "http { include $PLUSHU_ROOT/nginx/http/*.conf; }" \
    >>"$PLUSHU_ROOT/nginx/nginx.conf"

  # Overwrite the existing configuration (which we just ate)
  # with one that includes the Plushu one
  echo "$nginx_plushu_conf" >/etc/nginx/nginx.conf
}
setup_nginx_conf () {
  mkdir -p "$PLUSHU_ROOT/nginx/http"
  if [[ $EUID == 0 ]]; then
    if [[ "$(</etc/nginx/nginx.conf)" != "$nginx_plushu_conf" ]]; then
      echo "Configuring Nginx to read from Plushu..."
      eat_nginx_conf
    fi
  else
    echo "plushu-nginx moves the Nginx configuration to the Plushu root so"
    echo "Plushu plugins can configure Nginx. Reinstall this plugin as root to"
    echo "perform this replacement."
    echo
    echo "If you wish to integrate Plushu into your existing Nginx setup"
    echo "rather than having Plushu control it, add this line to your"
    echo "http block in /etc/nginx/nginx.conf:"
    echo
    echo "    include $PLUSHU_ROOT/nginx/http/*.conf;"
    echo
  fi
}

# if Nginx is present
if command -v nginx >/dev/null 2>&1; then
  echo "Nginx appears to be installed... good."
  check_nginx_run_status
  check_for_sudo
  setup_nginx_conf
else
  echo "Nginx does not appear to be installed."
  echo_install_information
fi
